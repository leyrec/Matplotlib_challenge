{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Mouse ID</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "      <th>Drug</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>b128</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>b128</td>\n",
       "      <td>5</td>\n",
       "      <td>45.651331</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>b128</td>\n",
       "      <td>10</td>\n",
       "      <td>43.270852</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>b128</td>\n",
       "      <td>15</td>\n",
       "      <td>43.784893</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>b128</td>\n",
       "      <td>20</td>\n",
       "      <td>42.731552</td>\n",
       "      <td>0</td>\n",
       "      <td>Capomulin</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Mouse ID  Timepoint  Tumor Volume (mm3)  Metastatic Sites       Drug\n",
       "0     b128          0           45.000000                 0  Capomulin\n",
       "1     b128          5           45.651331                 0  Capomulin\n",
       "2     b128         10           43.270852                 0  Capomulin\n",
       "3     b128         15           43.784893                 0  Capomulin\n",
       "4     b128         20           42.731552                 0  Capomulin"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Dependencies and Setup\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Hide warning messages in notebook\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# File to Load (Remember to Change These)\n",
    "clinical_trial_data_to_load = \"clinicaltrial_data.csv\"\n",
    "mouse_drug_data_to_load = \"mouse_drug_data.csv\"\n",
    "\n",
    "# Read the Mouse and Drug Data and the Clinical Trial Data\n",
    "clinical_trial_data = pd.read_csv(\"clinicaltrial_data.csv\")\n",
    "mouse_drug_data = pd.read_csv(\"mouse_drug_data.csv\")\n",
    "\n",
    "# Combine the data into a single dataset\n",
    "combined_data = pd.merge(clinical_trial_data, mouse_drug_data, how=\"outer\", on = \"Mouse ID\")\n",
    "\n",
    "\n",
    "# Display the data table for preview\n",
    "combined_data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tumor Response to Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>44.266086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>43.084291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>42.064317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>40.716325</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Tumor Volume (mm3)\n",
       "0  Capomulin          0           45.000000\n",
       "1  Capomulin          5           44.266086\n",
       "2  Capomulin         10           43.084291\n",
       "3  Capomulin         15           42.064317\n",
       "4  Capomulin         20           40.716325"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#TUMOR RESPONSE TO TREATMENT\n",
    "#Store the Mean Tumor Volume Data Grouped by Drug and Timepoint \n",
    "grouped_data = combined_data.groupby([\"Drug\", \"Timepoint\"])\n",
    "\n",
    "tumor_mean = grouped_data[\"Tumor Volume (mm3)\"].mean()\n",
    "\n",
    "#Convert to DataFrame\n",
    "tumor_mean_df = pd.DataFrame(tumor_mean).reset_index()\n",
    "\n",
    "#Preview DataFrame\n",
    "tumor_mean_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Tumor Volume (mm3)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.448593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.702684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.838617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.909731</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Tumor Volume (mm3)\n",
       "0  Capomulin          0            0.000000\n",
       "1  Capomulin          5            0.448593\n",
       "2  Capomulin         10            0.702684\n",
       "3  Capomulin         15            0.838617\n",
       "4  Capomulin         20            0.909731"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Store the Standard Error of Tumor Volumes Grouped by Drug and Timepoint \n",
    "grouped_data = combined_data.groupby([\"Drug\", \"Timepoint\"])\n",
    "tumor_se = grouped_data[\"Tumor Volume (mm3)\"].sem()\n",
    "\n",
    "#Convert to DataFrame\n",
    "tumor_se_df = pd.DataFrame(tumor_se).reset_index()\n",
    "\n",
    "#Preview DataFrame\n",
    "tumor_se_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>45.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>44.266086</td>\n",
       "      <td>46.503051</td>\n",
       "      <td>47.062001</td>\n",
       "      <td>47.389175</td>\n",
       "      <td>46.796098</td>\n",
       "      <td>47.125589</td>\n",
       "      <td>47.248967</td>\n",
       "      <td>43.944859</td>\n",
       "      <td>47.527452</td>\n",
       "      <td>46.851818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>43.084291</td>\n",
       "      <td>48.285125</td>\n",
       "      <td>49.403909</td>\n",
       "      <td>49.582269</td>\n",
       "      <td>48.694210</td>\n",
       "      <td>49.423329</td>\n",
       "      <td>49.101541</td>\n",
       "      <td>42.531957</td>\n",
       "      <td>49.463844</td>\n",
       "      <td>48.689881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>42.064317</td>\n",
       "      <td>50.094055</td>\n",
       "      <td>51.296397</td>\n",
       "      <td>52.399974</td>\n",
       "      <td>50.933018</td>\n",
       "      <td>51.359742</td>\n",
       "      <td>51.067318</td>\n",
       "      <td>41.495061</td>\n",
       "      <td>51.529409</td>\n",
       "      <td>50.779059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>40.716325</td>\n",
       "      <td>52.157049</td>\n",
       "      <td>53.197691</td>\n",
       "      <td>54.920935</td>\n",
       "      <td>53.644087</td>\n",
       "      <td>54.364417</td>\n",
       "      <td>53.346737</td>\n",
       "      <td>40.238325</td>\n",
       "      <td>54.067395</td>\n",
       "      <td>53.170334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>39.939528</td>\n",
       "      <td>54.287674</td>\n",
       "      <td>55.715252</td>\n",
       "      <td>57.678982</td>\n",
       "      <td>56.731968</td>\n",
       "      <td>57.482574</td>\n",
       "      <td>55.504138</td>\n",
       "      <td>38.974300</td>\n",
       "      <td>56.166123</td>\n",
       "      <td>55.432935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>38.769339</td>\n",
       "      <td>56.769517</td>\n",
       "      <td>58.299397</td>\n",
       "      <td>60.994507</td>\n",
       "      <td>59.559509</td>\n",
       "      <td>59.809063</td>\n",
       "      <td>58.196374</td>\n",
       "      <td>38.703137</td>\n",
       "      <td>59.826738</td>\n",
       "      <td>57.713531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>37.816839</td>\n",
       "      <td>58.827548</td>\n",
       "      <td>60.742461</td>\n",
       "      <td>63.371686</td>\n",
       "      <td>62.685087</td>\n",
       "      <td>62.420615</td>\n",
       "      <td>60.350199</td>\n",
       "      <td>37.451996</td>\n",
       "      <td>62.440699</td>\n",
       "      <td>60.089372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>36.958001</td>\n",
       "      <td>61.467895</td>\n",
       "      <td>63.162824</td>\n",
       "      <td>66.068580</td>\n",
       "      <td>65.600754</td>\n",
       "      <td>65.052675</td>\n",
       "      <td>63.045537</td>\n",
       "      <td>36.574081</td>\n",
       "      <td>65.356386</td>\n",
       "      <td>62.916692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>36.236114</td>\n",
       "      <td>64.132421</td>\n",
       "      <td>65.755562</td>\n",
       "      <td>70.662958</td>\n",
       "      <td>69.265506</td>\n",
       "      <td>68.084082</td>\n",
       "      <td>66.258529</td>\n",
       "      <td>34.955595</td>\n",
       "      <td>68.438310</td>\n",
       "      <td>65.960888</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin   Ceftamin  Infubinol   Ketapril   Naftisol    Placebo  \\\n",
       "Timepoint                                                                     \n",
       "0          45.000000  45.000000  45.000000  45.000000  45.000000  45.000000   \n",
       "5          44.266086  46.503051  47.062001  47.389175  46.796098  47.125589   \n",
       "10         43.084291  48.285125  49.403909  49.582269  48.694210  49.423329   \n",
       "15         42.064317  50.094055  51.296397  52.399974  50.933018  51.359742   \n",
       "20         40.716325  52.157049  53.197691  54.920935  53.644087  54.364417   \n",
       "25         39.939528  54.287674  55.715252  57.678982  56.731968  57.482574   \n",
       "30         38.769339  56.769517  58.299397  60.994507  59.559509  59.809063   \n",
       "35         37.816839  58.827548  60.742461  63.371686  62.685087  62.420615   \n",
       "40         36.958001  61.467895  63.162824  66.068580  65.600754  65.052675   \n",
       "45         36.236114  64.132421  65.755562  70.662958  69.265506  68.084082   \n",
       "\n",
       "Drug        Propriva   Ramicane   Stelasyn  Zoniferol  \n",
       "Timepoint                                              \n",
       "0          45.000000  45.000000  45.000000  45.000000  \n",
       "5          47.248967  43.944859  47.527452  46.851818  \n",
       "10         49.101541  42.531957  49.463844  48.689881  \n",
       "15         51.067318  41.495061  51.529409  50.779059  \n",
       "20         53.346737  40.238325  54.067395  53.170334  \n",
       "25         55.504138  38.974300  56.166123  55.432935  \n",
       "30         58.196374  38.703137  59.826738  57.713531  \n",
       "35         60.350199  37.451996  62.440699  60.089372  \n",
       "40         63.045537  36.574081  65.356386  62.916692  \n",
       "45         66.258529  34.955595  68.438310  65.960888  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "pivot_data_tumor= tumor_mean_df.pivot(index = \"Timepoint\",columns = \"Drug\",values = \"Tumor Volume (mm3)\")\n",
    "\n",
    "# Preview that Reformatting worked\n",
    "pivot_data_tumor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "#Set the x-axis variable\n",
    "Time = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]\n",
    "\n",
    "#Set the yerr variable (error bar height size)\n",
    "Capomulin_se= tumor_se_df.loc[tumor_se_df[\"Drug\"]==\"Capomulin\",\"Tumor Volume (mm3)\"]\n",
    "Infubinol_se= tumor_se_df.loc[tumor_se_df[\"Drug\"]==\"Infubinol\",\"Tumor Volume (mm3)\"]\n",
    "Ketapril_se= tumor_se_df.loc[tumor_se_df[\"Drug\"]==\"Ketapril\",\"Tumor Volume (mm3)\"]\n",
    "Placebo_se= tumor_se_df.loc[tumor_se_df[\"Drug\"]==\"Placebo\",\"Tumor Volume (mm3)\"]\n",
    "\n",
    "#Set the error bar plots\n",
    "plt.errorbar(Time, pivot_data_tumor[\"Capomulin\"], yerr= Capomulin_se, label= \"Capomulin\", marker=\"o\", color=\"red\", linestyle=\"--\")  \n",
    "plt.errorbar(Time, pivot_data_tumor[\"Infubinol\"], yerr=Infubinol_se, label =\"Infubinol\", marker=\"^\", color=\"blue\", linestyle= \"--\")\n",
    "plt.errorbar(Time, pivot_data_tumor[\"Ketapril\"], yerr=Ketapril_se, label =\"Ketapril\", marker=\"D\", color=\"green\", linestyle= \"--\")\n",
    "plt.errorbar(Time, pivot_data_tumor[\"Placebo\"], yerr=Infubinol_se, label =\"Placebo\", marker=\"s\", color=\"black\", linestyle= \"--\")\n",
    "\n",
    "#Set grid horizontal lines\n",
    "ax = plt.axes()        \n",
    "ax.yaxis.grid(which=\"major\", color='grey', linestyle='-', linewidth=1)\n",
    "\n",
    "#Set the graph legends, titles and axis labels\n",
    "plt.legend()\n",
    "plt.title(\"Tumor Response to Treatment\")\n",
    "plt.xlabel(\"Time (Days)\")\n",
    "plt.ylabel(\"Tumor Volume (mm3)\")\n",
    "\n",
    "#Save the Figure\n",
    "plt.savefig(\"Images/Tumor_Response.png\")\n",
    "\n",
    "#Show the Figure\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Tumor Response to Treatment](../Images/treatment.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Metastatic Response to Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.160000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.320000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.375000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.652174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Metastatic Sites\n",
       "0  Capomulin          0          0.000000\n",
       "1  Capomulin          5          0.160000\n",
       "2  Capomulin         10          0.320000\n",
       "3  Capomulin         15          0.375000\n",
       "4  Capomulin         20          0.652174"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#METASTATIC RESPONSE TO TREATMENT\n",
    "# Store the Mean Met. Site Data Grouped by Drug and Timepoint \n",
    "grouped_data = combined_data.groupby([\"Drug\",\"Timepoint\"])\n",
    "metastatic_mean = grouped_data[\"Metastatic Sites\"].mean()\n",
    "\n",
    "#Convert to DataFrame\n",
    "metastatic_mean_df = pd.DataFrame(metastatic_mean).reset_index()\n",
    "\n",
    "#Preview DataFrame\n",
    "metastatic_mean_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Metastatic Sites</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>0.074833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>0.125433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>0.132048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>0.161621</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Metastatic Sites\n",
       "0  Capomulin          0          0.000000\n",
       "1  Capomulin          5          0.074833\n",
       "2  Capomulin         10          0.125433\n",
       "3  Capomulin         15          0.132048\n",
       "4  Capomulin         20          0.161621"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Store the Standard Error associated with Met. Site Data Grouped by Drug and Timepoint \n",
    "grouped_data = combined_data.groupby([\"Drug\",\"Timepoint\"])\n",
    "metastatic_se = grouped_data[\"Metastatic Sites\"].sem()\n",
    "\n",
    "#Convert to DataFrame\n",
    "metastatic_se_df = pd.DataFrame(metastatic_se).reset_index()\n",
    "\n",
    "#Preview DataFrame\n",
    "metastatic_se_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.160000</td>\n",
       "      <td>0.380952</td>\n",
       "      <td>0.280000</td>\n",
       "      <td>0.304348</td>\n",
       "      <td>0.260870</td>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.120000</td>\n",
       "      <td>0.240000</td>\n",
       "      <td>0.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.320000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.666667</td>\n",
       "      <td>0.590909</td>\n",
       "      <td>0.523810</td>\n",
       "      <td>0.833333</td>\n",
       "      <td>0.565217</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>0.478261</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0.375000</td>\n",
       "      <td>0.789474</td>\n",
       "      <td>0.904762</td>\n",
       "      <td>0.842105</td>\n",
       "      <td>0.857143</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.333333</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>0.809524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.652174</td>\n",
       "      <td>1.111111</td>\n",
       "      <td>1.050000</td>\n",
       "      <td>1.210526</td>\n",
       "      <td>1.150000</td>\n",
       "      <td>1.526316</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.347826</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>1.294118</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.818182</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.277778</td>\n",
       "      <td>1.631579</td>\n",
       "      <td>1.500000</td>\n",
       "      <td>1.941176</td>\n",
       "      <td>1.357143</td>\n",
       "      <td>0.652174</td>\n",
       "      <td>1.157895</td>\n",
       "      <td>1.687500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>1.090909</td>\n",
       "      <td>1.937500</td>\n",
       "      <td>1.588235</td>\n",
       "      <td>2.055556</td>\n",
       "      <td>2.066667</td>\n",
       "      <td>2.266667</td>\n",
       "      <td>1.615385</td>\n",
       "      <td>0.782609</td>\n",
       "      <td>1.388889</td>\n",
       "      <td>1.933333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>1.181818</td>\n",
       "      <td>2.071429</td>\n",
       "      <td>1.666667</td>\n",
       "      <td>2.294118</td>\n",
       "      <td>2.266667</td>\n",
       "      <td>2.642857</td>\n",
       "      <td>2.300000</td>\n",
       "      <td>0.952381</td>\n",
       "      <td>1.562500</td>\n",
       "      <td>2.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>1.380952</td>\n",
       "      <td>2.357143</td>\n",
       "      <td>2.100000</td>\n",
       "      <td>2.733333</td>\n",
       "      <td>2.466667</td>\n",
       "      <td>3.166667</td>\n",
       "      <td>2.777778</td>\n",
       "      <td>1.100000</td>\n",
       "      <td>1.583333</td>\n",
       "      <td>2.785714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>1.476190</td>\n",
       "      <td>2.692308</td>\n",
       "      <td>2.111111</td>\n",
       "      <td>3.363636</td>\n",
       "      <td>2.538462</td>\n",
       "      <td>3.272727</td>\n",
       "      <td>2.571429</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>1.727273</td>\n",
       "      <td>3.071429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol   Placebo  \\\n",
       "Timepoint                                                                 \n",
       "0           0.000000  0.000000   0.000000  0.000000  0.000000  0.000000   \n",
       "5           0.160000  0.380952   0.280000  0.304348  0.260870  0.375000   \n",
       "10          0.320000  0.600000   0.666667  0.590909  0.523810  0.833333   \n",
       "15          0.375000  0.789474   0.904762  0.842105  0.857143  1.250000   \n",
       "20          0.652174  1.111111   1.050000  1.210526  1.150000  1.526316   \n",
       "25          0.818182  1.500000   1.277778  1.631579  1.500000  1.941176   \n",
       "30          1.090909  1.937500   1.588235  2.055556  2.066667  2.266667   \n",
       "35          1.181818  2.071429   1.666667  2.294118  2.266667  2.642857   \n",
       "40          1.380952  2.357143   2.100000  2.733333  2.466667  3.166667   \n",
       "45          1.476190  2.692308   2.111111  3.363636  2.538462  3.272727   \n",
       "\n",
       "Drug       Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "Timepoint                                           \n",
       "0          0.000000  0.000000  0.000000   0.000000  \n",
       "5          0.320000  0.120000  0.240000   0.166667  \n",
       "10         0.565217  0.250000  0.478261   0.500000  \n",
       "15         0.764706  0.333333  0.782609   0.809524  \n",
       "20         1.000000  0.347826  0.952381   1.294118  \n",
       "25         1.357143  0.652174  1.157895   1.687500  \n",
       "30         1.615385  0.782609  1.388889   1.933333  \n",
       "35         2.300000  0.952381  1.562500   2.285714  \n",
       "40         2.777778  1.100000  1.583333   2.785714  \n",
       "45         2.571429  1.250000  1.727273   3.071429  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "pivot_data_metastatic= metastatic_mean_df.pivot(index = \"Timepoint\",columns = \"Drug\",values = \"Metastatic Sites\")\n",
    "\n",
    "# Preview that Reformatting worked\n",
    "pivot_data_metastatic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (with Error Bars)\n",
    "#Set the x-axis variable\n",
    "Time = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]\n",
    "\n",
    "#Set the yerr variable (error bar height size)\n",
    "Capomulin_se= metastatic_se_df.loc[metastatic_se_df[\"Drug\"]==\"Capomulin\",\"Metastatic Sites\"]\n",
    "Infubinol_se= metastatic_se_df.loc[metastatic_se_df[\"Drug\"]==\"Infubinol\",\"Metastatic Sites\"]\n",
    "Ketapril_se= metastatic_se_df.loc[metastatic_se_df[\"Drug\"]==\"Ketapril\",\"Metastatic Sites\"]\n",
    "Placebo_se= metastatic_se_df.loc[metastatic_se_df[\"Drug\"]==\"Placebo\",\"Metastatic Sites\"]\n",
    "\n",
    "#Set the error bar plots\n",
    "plt.errorbar(Time, pivot_data_metastatic[\"Capomulin\"], yerr= Capomulin_se, label= \"Capomulin\", marker=\"o\", color=\"red\", linestyle=\"--\")  \n",
    "plt.errorbar(Time, pivot_data_metastatic[\"Infubinol\"], yerr=Infubinol_se, label =\"Infubinol\", marker=\"^\", color=\"blue\", linestyle= \"--\")\n",
    "plt.errorbar(Time, pivot_data_metastatic[\"Ketapril\"], yerr=Ketapril_se, label =\"Ketapril\", marker=\"D\", color=\"green\", linestyle= \"--\")\n",
    "plt.errorbar(Time, pivot_data_metastatic[\"Placebo\"], yerr=Infubinol_se, label =\"Placebo\", marker=\"s\", color=\"black\", linestyle= \"--\")\n",
    "\n",
    "#Set grid horizontal lines\n",
    "ax = plt.axes()        \n",
    "ax.yaxis.grid(which=\"major\", color='grey', linestyle='-', linewidth=1)\n",
    "\n",
    "#Set the graph legends, titles and axis labels\n",
    "plt.legend()\n",
    "plt.title(\"Metastatic Spread During Treatment\")\n",
    "plt.xlabel(\"Treatment Duration (Days)\")\n",
    "plt.ylabel(\"Met. Sites\")\n",
    "\n",
    "#Save the Figure\n",
    "plt.savefig(\"Images/Spread.png\")\n",
    "\n",
    "#Show the Figure\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Metastatic Spread During Treatment](../Images/spread.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Survival Rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Drug</th>\n",
       "      <th>Timepoint</th>\n",
       "      <th>Mouse Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>5</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>10</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>15</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Capomulin</td>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Drug  Timepoint  Mouse Count\n",
       "0  Capomulin          0           25\n",
       "1  Capomulin          5           25\n",
       "2  Capomulin         10           25\n",
       "3  Capomulin         15           24\n",
       "4  Capomulin         20           23"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SURVIVAL RATES \n",
    "# Store the Count of Mice Grouped by Drug and Timepoint (W can pass any metric)\n",
    "grouped_data = combined_data.groupby([\"Drug\", \"Timepoint\"])\n",
    "mice_count = grouped_data[\"Mouse ID\"].count()\n",
    "\n",
    "# Convert to DataFrame\n",
    "mice_count_df = pd.DataFrame(mice_count).reset_index()\n",
    "\n",
    "# Rename the column \"Mouse ID\" to \"Mouse Count\"\n",
    "renamed_df = mice_count_df.rename(columns={\"Mouse ID\":\"Mouse Count\"})\n",
    "\n",
    "# Preview DataFrame\n",
    "renamed_df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Drug</th>\n",
       "      <th>Capomulin</th>\n",
       "      <th>Ceftamin</th>\n",
       "      <th>Infubinol</th>\n",
       "      <th>Ketapril</th>\n",
       "      <th>Naftisol</th>\n",
       "      <th>Placebo</th>\n",
       "      <th>Propriva</th>\n",
       "      <th>Ramicane</th>\n",
       "      <th>Stelasyn</th>\n",
       "      <th>Zoniferol</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Timepoint</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "      <td>26</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>25</td>\n",
       "      <td>21</td>\n",
       "      <td>25</td>\n",
       "      <td>23</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>25</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>25</td>\n",
       "      <td>20</td>\n",
       "      <td>21</td>\n",
       "      <td>22</td>\n",
       "      <td>21</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>24</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>19</td>\n",
       "      <td>21</td>\n",
       "      <td>20</td>\n",
       "      <td>17</td>\n",
       "      <td>24</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>20</td>\n",
       "      <td>19</td>\n",
       "      <td>17</td>\n",
       "      <td>23</td>\n",
       "      <td>21</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>22</td>\n",
       "      <td>18</td>\n",
       "      <td>18</td>\n",
       "      <td>19</td>\n",
       "      <td>18</td>\n",
       "      <td>17</td>\n",
       "      <td>14</td>\n",
       "      <td>23</td>\n",
       "      <td>19</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>22</td>\n",
       "      <td>16</td>\n",
       "      <td>17</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>13</td>\n",
       "      <td>23</td>\n",
       "      <td>18</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>22</td>\n",
       "      <td>14</td>\n",
       "      <td>12</td>\n",
       "      <td>17</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>21</td>\n",
       "      <td>16</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>21</td>\n",
       "      <td>14</td>\n",
       "      <td>10</td>\n",
       "      <td>15</td>\n",
       "      <td>15</td>\n",
       "      <td>12</td>\n",
       "      <td>9</td>\n",
       "      <td>20</td>\n",
       "      <td>12</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>21</td>\n",
       "      <td>13</td>\n",
       "      <td>9</td>\n",
       "      <td>11</td>\n",
       "      <td>13</td>\n",
       "      <td>11</td>\n",
       "      <td>7</td>\n",
       "      <td>20</td>\n",
       "      <td>11</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Drug       Capomulin  Ceftamin  Infubinol  Ketapril  Naftisol  Placebo  \\\n",
       "Timepoint                                                                \n",
       "0                 25        25         25        25        25       25   \n",
       "5                 25        21         25        23        23       24   \n",
       "10                25        20         21        22        21       24   \n",
       "15                24        19         21        19        21       20   \n",
       "20                23        18         20        19        20       19   \n",
       "25                22        18         18        19        18       17   \n",
       "30                22        16         17        18        15       15   \n",
       "35                22        14         12        17        15       14   \n",
       "40                21        14         10        15        15       12   \n",
       "45                21        13          9        11        13       11   \n",
       "\n",
       "Drug       Propriva  Ramicane  Stelasyn  Zoniferol  \n",
       "Timepoint                                           \n",
       "0                26        25        26         25  \n",
       "5                25        25        25         24  \n",
       "10               23        24        23         22  \n",
       "15               17        24        23         21  \n",
       "20               17        23        21         17  \n",
       "25               14        23        19         16  \n",
       "30               13        23        18         15  \n",
       "35               10        21        16         14  \n",
       "40                9        20        12         14  \n",
       "45                7        20        11         14  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Minor Data Munging to Re-Format the Data Frames\n",
    "pivot_data_mice= renamed_df.pivot(index = \"Timepoint\", columns= \"Drug\", values = \"Mouse Count\")\n",
    "\n",
    "# Preview the Data Frame\n",
    "pivot_data_mice\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Generate the Plot (Accounting for percentages)\n",
    "#Set the x-axis variable\n",
    "Time = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45]\n",
    "\n",
    "#Set the line plots\n",
    "plt.plot(Time, (pivot_data_mice[\"Capomulin\"]/25)*100, label= \"Capomulin\", marker=\"o\", color=\"red\", linestyle=\"--\")  \n",
    "plt.plot(Time, (pivot_data_mice[\"Infubinol\"]/25)*100, label =\"Infubinol\", marker=\"^\", color=\"blue\", linestyle= \"--\")\n",
    "plt.plot(Time, (pivot_data_mice[\"Ketapril\"]/25)*100, label =\"Ketapril\", marker=\"D\", color=\"green\", linestyle= \"--\")\n",
    "plt.plot(Time, (pivot_data_mice[\"Placebo\"]/25)*100, label =\"Placebo\", marker=\"s\", color=\"black\", linestyle= \"--\")\n",
    "\n",
    "#Set grid \n",
    "plt.grid(which=\"major\", color='grey', linestyle='-', linewidth=1)\n",
    "\n",
    "#Set the graph legends, titles and axis labels\n",
    "plt.legend()\n",
    "plt.title(\"Survival During Treatment\")\n",
    "plt.xlabel(\"Time (Days)\")\n",
    "plt.ylabel(\"Survival Rate (%)\")\n",
    "\n",
    "#Save the Figure\n",
    "plt.savefig(\"Images/Survival.png\")\n",
    "\n",
    "# Show the Figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Metastatic Spread During Treatment](../Images/survival.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Summary Bar Graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Drug\n",
       "Capomulin   -19.475303\n",
       "Ceftamin     42.516492\n",
       "Infubinol    46.123472\n",
       "Ketapril     57.028795\n",
       "Naftisol     53.923347\n",
       "Placebo      51.297960\n",
       "Propriva     47.241175\n",
       "Ramicane    -22.320900\n",
       "Stelasyn     52.085134\n",
       "Zoniferol    46.579751\n",
       "Name: 45, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#SUMMARY BAR GRAPH\n",
    "# Calculate the percent changes for each drug\n",
    "\n",
    "Initial_tumor_value = 45\n",
    "Percent_change = ((pivot_data_tumor.loc[45,:]-Initial_tumor_value)/Initial_tumor_value)*100\n",
    "\n",
    "# Display the data to confirm\n",
    "Percent_change"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Splice the data between passing and failing drugs\n",
    "passing_drug = Percent_change < 0\n",
    "\n",
    "# Orient widths. Add labels, tick marks, etc. \n",
    "drug_list = ['Capomulin','Infubinol','Ketapril','Placebo']\n",
    "change_list = [(Percent_change[drug])for drug in drug_list]\n",
    "change_plt = plt.bar(drug_list,change_list,width=-1,align='edge',color=passing_drug.map({True:'g',False:'r'}))\n",
    "plt.grid()\n",
    "plt.ylim(-30,70)\n",
    "plt.ylabel('% Tumor Volume Change')\n",
    "plt.title('Tumor Change Over 45 Day Treatment')\n",
    "\n",
    "# Use functions to label the percentages of changes\n",
    "def autolabel(rects):\n",
    "    for rect in rects:\n",
    "        height = rect.get_height()\n",
    "        if height > 0:\n",
    "            label_position = 2\n",
    "        else:\n",
    "            label_position = -8\n",
    "        plt.text(rect.get_x() + rect.get_width()/2., label_position,\n",
    "                '%d' % int(height)+'%',color='white',\n",
    "                ha='center', va='bottom')\n",
    "                \n",
    "# Call functions to implement the function calls\n",
    "autolabel(change_plt)\n",
    "\n",
    "# Save the Figure\n",
    "plt.savefig(\"Images/Change.png\")\n",
    "\n",
    "# Show the Figure\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![Metastatic Spread During Treatment](../Images/change.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#OBSERVATION 1: \"TUMOR RESPONSE TO TREATMENT\"\n",
    "# From the four drugs observed (Camopulin, Infubinol, Ketrapil, Placebo), \"Camopulin\"is the only one\n",
    "# that reduces continously the tumor volume during the treatment. The other drugs do not reduce it. If we also\n",
    "#look at \"Tumor Change Over 45 Days Treatment\" it can be concluded that Camopulin reduces the initial tumor volume\n",
    "#size from the begining of the treatment to the end (45 days after) in a 19%. rest of drugs increases the tumor\n",
    "#sizes considerably (46%, 57% and 51%).\n",
    "\n",
    "#OBSERVATION 2: \"METASTATIC SPREAD DURING TREATMENT\"\n",
    "# From the four drugs observed (Camopulin, Infubinol, Ketrapil, Placebo), \"Camopulin\"is the drug that achieves \n",
    "# fewer spread of the number of metastatic points during the treatment. At the end of the treatment with Camopulin\n",
    "# the average of metastatic points is almost 1.5, followed by Infubinol with an average of more than 2 points and \n",
    "# finally, by Ketrapil and Placebo that double the number of points spread, more than 3, compare to Camopulin \n",
    "# at the end of the period treatment.\n",
    "\n",
    "#OBSERVATION 3: \"SURVIVAL DURING TREATMENT\"\n",
    "# From the four drugs observed (Camopulin, Infubinol, Ketrapil, Placebo), \"Camopulin\" percentage rate of survival\n",
    "#is more than 80% while for the other Drugs this rate is bellow 40%.\n",
    "\n",
    "#FINAL CONCLUSION: all 3 observations confirms that if we compare the 4 drugs, Camopulin is the one that has better\n",
    "# results in order to reduces Tummor volumes, limit the Spread of Metastatic points, and have a better rate of \n",
    "#survival during the period of treatment."
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
